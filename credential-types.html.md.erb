---
title: CredHub Credential Types
owner: CredHub
---

<% if vars.platform_code == 'CF' %>
<div class="quick-links">
<ul>
<li><a href="#cred-types">Credential Types</a></li>
<li><a href="#consuming-types">Consuming CredHub Types in Releases</a></li>
<li><a href="#enable-auto-generation">Enabling CredHub Automatic Generation in Releases</a></li>
</ul>
</div>
<% end %>

This topic describes the different credential types supported by CredHub.

CredHub supports different types of credentials to simplify generating and managing multi-part credentials. For example, a TLS certificate contains three parts: the root certificate authority (CA), the certificate, and the private key. CredHub supports all three parts, which helps keep connection requests from being rejected erroneously.

<% if vars.platform_code == 'CF' %>
## <a name='cred-types'></a> Credential Types
<% end %>

CredHub supports the following credential types:

<table>
  <tr>
    <th style="width:20%">Type</th>
    <th>Description</th>
  </tr><tr>
    <td><code>value</code></td>
    <td>A single string value for arbitrary configurations and other non-generated or validated strings.</td>
  </tr><tr>
    <td><code>json</code></td>
    <td>An arbitrary JSON object for static configurations with many values.</td>
  </tr><tr>
    <td><code>user</code></td>
    <td>Three string values for username, password, and password hash.</td>
  </tr><tr>
    <td><code>password</code></td>
    <td>A single string value for passwords and other random string credentials. Values for this type can be automatically generated.</td>
  </tr><tr>
    <td><code>certificate</code></td>
    <td>An object containing a root CA, certificate, and private key. Use this type for key pair apps that utilize a certificate, such as TLS connections. Values for this type can be automatically generated.</td>
  </tr><tr>
    <td><code>rsa</code></td>
    <td>An object containing an RSA public key and private key without a certificate. Values for this type can be automatically generated.</td>
  </tr><tr>
    <td><code>ssh</code></td>
    <td>An object containing an SSH-formatted public key and private key. Values for this type can be automatically generated.</td>
  </tr>
</table>

Each credential type supports distinct parameters for customizing how credentials are generated. These include minimum password lengths, required characters, and certificate fields. Credentials have a maximum size of 64 KB. For more information, see [CredHub API documentation](https://docs.cloudfoundry.org/api/credhub/).

For every credential type, secret values are encrypted before storage. For instance, the private key of a certificate-type credential and the password of a user-type credential are encrypted before storage. For JSON and Value type credentials, the full contents are encrypted before storage.


<% if vars.platform_code == 'CF' %>
## <a name='consuming-types'></a> Consuming CredHub Types in Releases

The BOSH Director interpolates the key value from the credential response for a deployment variable.

For example, in a deployment containing the password credential referenced above, BOSH substitutes `"nZaowPHTl0CQYVyYA0nV7ayHVulCBU3WTmwJKiZm"` for the variable. The behavior is similar for other credential types as well. For example, if the certificate credential is referenced above, BOSH substitutes the object below:

```
{
  "ca": "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
  "certificate": "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
  "private_key": "-----BEGIN EXAMPLE RSA PRIVATE KEY-----...-----END EXAMPLE RSA PRIVATE KEY-----"
}
```

Similarly, the object could be translated into YAML format:

```
  ca: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE------
  certificate: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE------
  private_key: |
    -----BEGIN EXAMPLE RSA PRIVATE KEY-----
    ...
    -----END EXAMPLE RSA PRIVATE KEY------
```

If you want to leverage a non-string typed credential, update your release to properly consume the new format. The following example shows how to configure a release to accept the certificate and password credential types referenced above. The sample Release Job Spec below includes an example to instruct users on how to define the values if they are not using a CredHub credential.

### Release Job Spec

```
---
name: demo

properties:
  demo.tls:
    description: "Certificate and private key for TLS connection to API"
    example: |
        ca: |
          -----BEGIN CERTIFICATE-----
          ...
          -----END CERTIFICATE-----
        certificate: |
          -----BEGIN CERTIFICATE-----
          ...
          -----END CERTIFICATE-----
        private_key: |
          -----BEGIN EXAMPLE RSA PRIVATE KEY-----
          ...
          -----END EXAMPLE RSA PRIVATE KEY-----
  admin-password:
    description: "Admin password for the application"
    example: nZaowPHTl0CQYVyYA0nV7ayHVulCBU3WTmwJKiZm
```

### Job Template ERB

```
erb
api-ca=<%= p("demo.tls.ca") %>
api-certificate=<%= p("demo.tls.certificate") %>
api-private-key=<%= p("demo.tls.private_key") %>
admin-password=<%= p("admin-password") %>
```

### Deployment Manifest

CredHub and BOSH are integrated to provide the option of generating the required credential values on deployment. You can define these generation parameters in the deployment manifest under the `variables` section, as shown in the example below.

```
---
name: demo-deploy

variables:
- name: demo-ca
  type: certificate
  options:
    is_ca: true
    common_name: 'Demo Certificate Authority'
- name: demo-tls
  type: certificate
  options:
    ca: demo-ca
    common_name: example.com
    alternative_names:
    - example.com
    - www.example.com
    extended_key_usage:
    - client_auth
- name: admin-password
  type: password
  options:
    length: 40

instance_groups:
  properties:
    demo:
      tls: ((demo-tls))
      admin-password: ((demo-password))
```

Updating a release for other types is similar to the example above, being mindful of the key name for each value you wish to consume.

<% end %>
